type Query{

    #Usuario Query
    buscarUsuarioPorId(id: String): Usuario
    buscarTodosLosUsuarios : [Usuario]
    buscarUsuarioPorTexto(text: String): [Usuario]
    buscarPorAlias(alias: String): Usuario
    buscarUsuariosPorInstrumentos(instrumentos: [String!]!): [Usuario]
    misLikesUsuario(usuarioAlias: String!): [Publicacion]
    existByAlias(alias: String): Boolean
    verificaSiSigue(aliasVisitante:String!, aliasPerfil:String!): Boolean

    #Instrumentos y TipoInstrumentos
    buscarTodosLosInstrumentos : [Instrumento]
    buscarTodosLosTiposInstrumento : [TipoInstrumento]
    buscarInstrumentosPorTipo(tipo: String) : [Instrumento]
    buscarInstrumentoPorNombre(nombre: String) : Instrumento

    # Publiacion Query
    listarPublicaciones: [Publicacion]
    misLikesPublicacion(idPublicacion: String!): [UsuariosLikes]

    # Banda
    buscarBandaPorNombre(nombreBanda: String): Banda
    buscarBandaPorId(idBanda: String): Banda
    listarBandas: [Banda]

    # Seguidores
    misSeguidores(idAlias: String): [Seguidores]


}

type Mutation{
    #Cambio
    #Recordar que el nombre del la query o mutation deber ser igual al metodo en el controlador
    #Los parametros a recibir deben ser iguales a los del controlador
    #Para devolcer valores, graphql toma tambien los type que estan en otros files.graphqls

    #Usuario Mutation
    guardarUsuario(user: userInput): Usuario
    comprobarCredenciales(user:userInput) : Usuario
    actualizarUsuario(id: ID!, user: IactualizarUsuario): Usuario
    actualizarDescripcion(id: ID!, descripcion: String!): Boolean
    actualizarContrasena(id: ID!, contrasena : String!) : Boolean
    actualizarRedes(id: ID!, redes: RedesInput): Boolean
    eliminarPorIdUsuario(id: ID!): Boolean
    actualizarInstrumentosUsuario(idInstrumento: ID!, idUsuario: ID!) : Usuario
    #actualizar solo nombre y apellido
    actualizarNombreApellidoPorAlias(alias: String!, nombre: String!, apellido: String!): Usuario

    seguirUsuario(aliasSeguidor:String!, aliasSeguido:String!): Boolean
    dejarDeSeguirUsuario(aliasSeguidor:String!, aliasSeguido:String!): Boolean


    #Banda Mutation
    crearBanda(idUsuario: ID!, banda: BandaInput): Banda
    cambiarNombre(id: ID!, nombre: String): Banda
    cambiarDescripcion(id: ID!, descripcion: String): Banda
    eliminarBanda(id: ID!): Boolean
    anadirMiembros(nombreBanda: String, idUsuarios: [String]): Banda
    eliminarIntegrante(idBanda: ID!, idIntegrante: ID!): Banda

    #Instrumentos y TipoInstrumentos Mutation
    guardarInstrumento(instrumento: InstrumentoInput, tipo:String) : Instrumento
    eliminarInstrumentoPorId(id: ID!): Boolean
    guardarTipoInstrumento(tipoInstrumento: TipoInstrumentoInput): TipoInstrumento
    eliminarTipoInstrumentoPorId(id: ID!): Boolean

    # Publicacion Mutation
    eliminarPublicacionPorId(idUsuario: ID!, idPublicacion: ID!): Boolean
    meGusta(idPublicacion: String!, usuarioAlias: String!): Boolean
    crearPublicacion(idUsuario: ID!,descripcion: String): Publicacion

    # Seguidos Mutation

    # Seguidores
    eliminarSeguidor(idAliasUsuario: String, idAliasSeguidor: String): Boolean

}

scalar Date
type Usuario{
    #aqui faltan las fechas
    id : String
    nombre : String
    fotoPerfilUrl : String
    fotoPortadaUrl : String
    apellido : String
    alias : String
    email : String
    telefono : String
    edad : Int
    genero : String
    ubicacion : Ubicacion
    longitud: Float
    latitud: Float
    c_seguidores : Int
    c_seguidos : Int
    misInstru : [Instrumento]
    misBandas : [Banda]
    descripcion : String
    redes : Redes
    contrasena : String
    fechaNacimiento: Date
    seguidos: [String]
    seguidores: [String]
}

type Redes{
    instagram : String
    youtube : String
    x : String
    whatsapp : String
    email : String
}

type Banda{
    id : String
    nombreBanda : String
    descripcion: String
    idCreador : String
    miembros : [String]
}

type Ubicacion{
    pais : Pais
    estado : Estado
    departamento : Departamento
}

type Pais{
    nombre : String
}

type Estado{
    nombre : String
}

type Departamento{
    nombre : String
}

type Instrumento{
    id : String
    nombre : String
    tipoInstrumento : TipoInstrumento
}

type TipoInstrumento{
    id: String
    nombre : String
}

input userInput{
    #Es la informacion escencial
    nombre : String
    apellido : String
    alias : String
    email : String
    telefono : String
    fechaNacimiento: Date
    edad : Int
    ubicacion : UbicacionInput
    genero : String
    contrasena : String
}

input IactualizarUsuario{
    id : String
    nombre : String
    apellido : String
    alias : String
    email : String
    contrasena : String
    telefono : String
    edad : Int
    ubicacion : UbicacionInput
    c_seguidores : Int
    c_seguidos : Int
    misInstru : [InstrumentoInput]
    misBandas : [BandaInput]
    descripcion : String
    redes : RedesInput
}

input BandaInput{
    nombreBanda: String
    descripcion: String
    miembros: [String]
}

input UbicacionInput{
    pais : PaisInput
    estado : EstadoInput
    departamento : DepartamentoInput
}

input PaisInput{
    nombre : String
}

input EstadoInput{
    nombre : String
}

input DepartamentoInput{
    nombre : String
}

input RedesInput{
    instagram : String
    youtube : String
    x : String
    whatsapp : String
    email : String
}

input InstrumentoInput{
    nombre : String
}
input TipoInstrumentoInput{
    nombre : String
}
